// app/api/auth/signup/route.ts - Updated API route with membership number and email
import { NextRequest, NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import { z } from 'zod';
import { createUser, emailExists } from '@/lib/db';
import { sendWelcomeEmail } from '@/lib/email';

// Validation schema
const signupSchema = z.object({
  firstName: z.string().min(1, 'First name is required').max(100),
  lastName: z.string().min(1, 'Last name is required').max(100),
  email: z.string().email('Invalid email format'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  sex: z.enum(['male', 'female'], {
    message: 'Sex selection is required',
  }),
  province: z.enum([
    'eastern-cape', 'free-state', 'gauteng', 'kwazulu-natal',
    'limpopo', 'mpumalanga', 'northern-cape', 'north-west', 'western-cape'
  ], {
    message: 'Province selection is required',
  }),
  isSouthAfricanNative: z.boolean({
    message: 'South African native status is required',
  }),
  willingToVolunteer: z.boolean().default(false),
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate the request body
    const validatedData = signupSchema.parse(body);
    
    // Check if user must be a South African native
    if (!validatedData.isSouthAfricanNative) {
      return NextResponse.json(
        { error: 'This platform is exclusively for South African natives' },
        { status: 400 }
      );
    }
    
    // Check if email already exists
    const emailAlreadyExists = await emailExists(validatedData.email);
    if (emailAlreadyExists) {
      return NextResponse.json(
        { error: 'An account with this email already exists' },
        { status: 409 }
      );
    }
    
    // Hash the password
    const passwordHash = await bcrypt.hash(validatedData.password, 12);
    
    // Create the user (membership number will be auto-generated by database trigger)
    const newUser = await createUser({
      email: validatedData.email,
      passwordHash,
      firstName: validatedData.firstName,
      lastName: validatedData.lastName,
      sex: validatedData.sex,
      province: validatedData.province,
      isSouthAfricanNative: validatedData.isSouthAfricanNative,
      willingToVolunteer: validatedData.willingToVolunteer,
    });
    
    // Check if membership number was generated successfully
    if (!newUser.membership_number) {
      console.error('User created but membership number is null:', newUser.id);
      
      // Try to generate membership number manually as fallback
      const { generateMembershipNumber, membershipNumberExists } = await import('@/lib/db');
      let membershipNumber = null;
      let attempts = 0;
      
      while (!membershipNumber && attempts < 10) {
        const generatedNumber = generateMembershipNumber();
        const exists = await membershipNumberExists(generatedNumber);
        if (!exists) {
          membershipNumber = generatedNumber;
          
          // Update the user with the generated membership number
          const { pool } = await import('@/lib/db');
          const client = await pool.connect();
          try {
            await client.query(
              'UPDATE users SET membership_number = $1 WHERE id = $2',
              [membershipNumber, newUser.id]
            );
            newUser.membership_number = membershipNumber;
          } finally {
            client.release();
          }
        }
        attempts++;
      }
      
      if (!membershipNumber) {
        console.error('Failed to generate membership number after multiple attempts');
        return NextResponse.json(
          { error: 'Account created but membership number generation failed. Please contact support.' },
          { status: 500 }
        );
      }
    }
    
    // Send welcome email with membership number (only if we have a valid membership number)
    try {
      const emailSent = await sendWelcomeEmail({
        email: newUser.email,
        firstName: newUser.first_name,
        lastName: newUser.last_name,
        membershipNumber: newUser.membership_number,
      });
      
      if (!emailSent) {
        console.error('Failed to send welcome email, but user was created successfully');
      }
    } catch (emailError) {
      console.error('Error sending welcome email:', emailError);
      // Don't fail the registration if email fails
    }
    
    // Return success response (without password hash)
    return NextResponse.json(
      {
        message: 'Account created successfully',
        user: {
          id: newUser.id,
          email: newUser.email,
          firstName: newUser.first_name,
          lastName: newUser.last_name,
          membershipNumber: newUser.membership_number,
          createdAt: newUser.created_at,
        },
      },
      { status: 201 }
    );
    
  } catch (error) {
    console.error('Signup error:', error);
    
    // Handle validation errors
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed', 
          details: error.issues.map(err => ({
            field: err.path.join('.'),
            message: err.message
          }))
        },
        { status: 400 }
      );
    }
    
    // Handle database errors
    if (error instanceof Error) {
      // Check for unique constraint violation (duplicate email)
      if (error.message.includes('unique constraint') || error.message.includes('duplicate key')) {
        return NextResponse.json(
          { error: 'An account with this email already exists' },
          { status: 409 }
        );
      }
    }
    
    // Generic server error
    return NextResponse.json(
      { error: 'Internal server error. Please try again later.' },
      { status: 500 }
    );
  }
}